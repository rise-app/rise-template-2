import qs from 'qs'
import { defaultsDeep, pick, pickBy, identity } from 'lodash'
import { flatten, unflatten } from 'flat'

/**
 * Serialize a Query String
 * @param obj
 * @param prefix
 */
export const serialize = (obj) => {

  obj = pickBy(obj, identity)

  const str = qs.stringify(obj)

  return str
  // let str = [], p

  // Object.keys(obj || {}).forEach(function(p) {
  // // for (p in obj) {
  // //   if (obj && obj.hasOwnProperty(p)) {
  //
  //     const k = prefix
  //       ? prefix + '[' + p + ']'
  //       : p
  //     const v = obj[p]
  //
  //     str.push((v !== null && typeof v === 'object')
  //       ? serialize(v, k)
  //       : encodeURIComponent(k) + '=' + encodeURIComponent(v))
  //   // }
  // })
  // return str.join('&')
}
export const deserialize = (str) => {
  return qs.parse(str)
}

  export const pageQuery = (query, page, limit, prefix = null) => {
  const offset = (page * limit) - limit
  return serialize({
    ...query,
    [`${prefix ? prefix + '_' : ''}limit`]: limit,
    [`${prefix ? prefix + '_' : ''}offset`]: offset
  })
}

export const mergeQuery = ( _query, query) => {
  return serialize({
    ..._query,
    ...query
  })
}

export const whereQuery = (query, _query) => {

  query = defaultsDeep(_query, query)

  console.log('Merged Query', query)
  return serialize(query)
}

export const sortQuery = (query, _query) => {

  query = defaultsDeep(_query, query)

  console.log('Sort Query', query)
  return serialize(query)
}

export const hydrateQuery = (query) => {
  return unflatten(query)
}

export const dehydrateQuery = (query) => {
  return flatten(query)
}

export const riseQuery = (query) => {
 return pickBy(pick(query, ['limit', 'offset', 'term', 'where', 'sort', 'attributes']), identity)
}

export const pluckQuery = (query = {}, prefix = '') => {
  const _query = Object.keys(query)
    .filter(function(k) {
      return k.indexOf(prefix) == 0
    })
    .reduce(function(newQuery, k) {
      newQuery[k.replace(`${prefix}_`, '')] = query[k]
      return newQuery
    }, {})

  console.log('BRK PLUCK QUERY', _query)
  return _query
}
